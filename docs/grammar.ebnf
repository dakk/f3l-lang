<program> ::= <expr>* EOF

<ident> ::= IDENT

<parameter> ::= IDENT COLON <type_sig>

<param_opt_typed> ::= IDENT COLON <type_sig>
                    | IDENT

<type_sig> ::= <ident>
             | <type_expr> CONT
             | LPAR <type_sig> MUL <type_sig> (MUL <type_sig>)* RPAR
             | LBRACE <parameter> (SEMICOLON <parameter>)* RBRACE
             | ENUM LPAR [<ident> (PIPE <ident>)*] RPAR
             | LPAR <type_sig> RPAR
             | <type_sig> LAMBDA <type_sig>

<type_expr> ::= <type_sig>

<erec_element> ::= IDENT EQ <expr>

<match_case> ::= PIPE <expr> LAMBDA <expr>
               | PIPE UNDERSCORE LAMBDA <expr>

<left> ::= IDENT (DOT IDENT)*

<expr> ::= UNIT
         | NONE
         | TRUE
         | FALSE
         | STRING
         | BYTES
         | FLOAT
         | INT
         | NAT
         | SOME LPAR <expr> RPAR
         | LBRACE <erec_element> (SEMICOLON <erec_element>)* RBRACE
         | LSQUARE [<expr> (COMMA <expr>)*] RSQUARE
         | LPAR <expr> COMMA <expr> (COMMA <expr>)* RPAR
         | FUN LPAR [<parameter> (COMMA <parameter>)*] RPAR LAMBDA LPAR
           <expr> RPAR
         | LET IDENT COLON <type_sig> EQ <expr> IN <expr>
         | LET IDENT COLON <type_sig> EQ <expr>
         | LET IDENT EQ <expr> IN <expr>
         | LET IDENT EQ <expr>
         | LET LPAR <param_opt_typed> (COMMA <param_opt_typed>)* RPAR EQ
           <expr> IN <expr>
         | LET LPAR <param_opt_typed> (COMMA <param_opt_typed>)* RPAR EQ
           <expr>
         | <expr> ADD <expr>
         | <expr> SUB <expr>
         | <expr> DIV <expr>
         | <expr> MUL <expr>
         | <expr> MOD <expr>
         | <expr> AND <expr>
         | <expr> OR <expr>
         | NOT <expr>
         | <expr> LT <expr>
         | <expr> LTE <expr>
         | <expr> GT <expr>
         | <expr> GTE <expr>
         | <expr> EQEQ <expr>
         | <expr> NEQ <expr>
         | IF <expr> THEN <expr> ELSE <expr>
         | MATCH <expr> WITH <match_case>+
         | IDENT
         | <left> DOT IDENT
         | <expr> DOT IDENT
         | IDENT HT IDENT
         | <left> LPAR [<expr> (COMMA <expr>)*] RPAR
         | <expr> LPAR [<expr> (COMMA <expr>)*] RPAR
         | LPAR <expr> RPAR
         | LPAR <expr> COLON <type_sig> RPAR
         | TYPE IDENT EQ <type_sig>
         | EXTERNAL IDENT COLON <type_expr> EQ STRING
         | MODULE IDENT EQ STRUCT <expr> END
         | OPEN <ident>
         | <expr> SEMICOLON SEMICOLON <expr>


