<program> ::= <declaration>* EOF

<parameter> ::= IDENT COLON <type_sig>

<param_opt_typed> ::= IDENT
                    | LPAR IDENT COLON <type_sig> RPAR

<ident> ::= IDENT

<type_sig> ::= TANY
             | <ident>
             | <type_sig> MUL <type_sig>
             | LBRACE <parameter> (SEMICOLON <parameter>)* RBRACE
             | <ident> PIPE <ident> (PIPE <ident>)*
             | LPAR <type_sig> RPAR
             | <type_sig> LAMBDA <type_sig>

<type_expr> ::= <type_sig>

<erec_element> ::= IDENT EQ <expr>

<left> ::= IDENT (DOT IDENT)*

<value> ::= UNIT
          | TRUE
          | FALSE
          | STRING
          | BYTES
          | FLOAT
          | INT
          | NAT
          | IDENT

<case> ::= <value> LAMBDA <expr>
         | UNDERSCORE LAMBDA <expr>

<expr> ::= <value>
         | LBRACE <erec_element> (SEMICOLON <erec_element>)* RBRACE
         | LPAR <expr> COMMA <expr> RPAR
         | FUN LPAR RPAR LAMBDA <expr>
         | FUN <param_opt_typed> LAMBDA <expr>
         | LET IDENT COLON <type_sig> EQ <expr> IN <expr>
         | LET IDENT EQ <expr> IN <expr>
         | LET REC IDENT COLON <type_sig> EQ <expr> IN <expr>
         | LET REC IDENT EQ <expr> IN <expr>
         | <expr> ADD <expr>
         | <expr> SUB <expr>
         | <expr> DIV <expr>
         | <expr> MUL <expr>
         | <expr> MOD <expr>
         | <expr> AND <expr>
         | <expr> OR <expr>
         | NOT <expr>
         | <expr> LT <expr>
         | <expr> LTE <expr>
         | <expr> GT <expr>
         | <expr> GTE <expr>
         | <expr> EQ <expr>
         | <expr> NEQ <expr>
         | IF <expr> THEN <expr> ELSE <expr>
         | <left> DOT IDENT
         | <expr> DOT IDENT
         | <left> LPAR <expr> RPAR
         | <expr> LPAR <expr> RPAR
         | LPAR <expr> RPAR
         | LPAR <expr> COLON <type_sig> RPAR
         | <expr> PIPEGT <expr>
         | MATCH <expr> WITH <case> (PIPE <case>)*
         | MATCH <expr> WITH PIPE <case> (PIPE <case>)*

<dtype> ::= TYPE TANY <ident> EQ <type_sig>
          | TYPE IDENT EQ <type_sig>

<ddef> ::= LET IDENT COLON <type_expr> EQ <expr>
         | LET IDENT EQ <expr>
         | LET REC IDENT COLON <type_expr> EQ <expr>
         | LET REC IDENT EQ <expr>

<dexternal> ::= EXTERNAL IDENT COLON <type_expr> EQ STRING

<dopen> ::= OPEN <ident>

<declaration> ::= <dtype>
                | <ddef>
                | <dexternal>
                | <dopen>


